<?php

/**
  Sessions
 * 
  Sessions in PHP are driven by a unique session ID, which is a cryptographically random number. This session ID is generated by PHP and stored on the client side for the lifetime of a session. It can be either stored on a user’s computer in a cookie (the most common method) or passed along through URLs.
 * 
 * The session ID acts as a key that allows you to register particular variables as so-called session variables. The contents of these variables are stored on the server. The session ID is the only information visible at the client side. If, at the time of a particular connection to your site, the session ID is visible either through a cookie or the URL, you can access the session variables stored on the server for that session
 * 
 * 
 * 
 * 
  Cookies
 * 
 * Cookies are a different solution to the problem of preserving state across a number of transactions while still having a clean-looking URL. A cookie is a small piece of information that scripts can store on a client-side machine. You can set a cookie on a user’s machine by sending an HTTP header containing data in the following format:
 * 
  Set-cookie: name=value; [expires=date;] [path=path]
 *  [domain=domain_name;] [secure;] [HttpOnly]
 * 
 * When a browser connects to an URL, it first searches the cookies stored locally. If any of the locally stored cookies are relevant to the domain and path being connected to, the information stored in the cookie or cookies will be transmitted back to the server.
 * 
 * 
 * 
 * 
  Setting Cookies from PHP
 * 
 *  You can manually set cookies in PHP using the setcookie() function. It has the following prototype:
  bool setCookie (string name [, string value [, int expire = 0 [, string path [, string domain [, int secure = false [, int httponly = false]]]]]])
 * 
 * 
 * You can delete a cookie by calling setcookie() again with the same cookie name and an expiry time in the past. You can also set a cookie manually via the PHP header() function and the cookie syntax given previously. One tip is that cookie headers must be sent before any other headers; otherwise, they will not work; this is a requirement for standard use of cookies rather than a PHP limitation.
 * 
 * 
 * 
 * 
  Using Cookies with sessions
 * 
 * Some browsers do not accept cookies, and some users might have disabled cookies in their browsers.
 * 
 * When you are using PHP sessions, you do not have to manually set any cookies. The session functions take care of this task for you by creating all the necessary cookies to match the session being created when the session functions are used.
 * You can use the function session_get_cookie_params() to see the contents of the cookie set by session control. It returns an array containing the elements lifetime, path, domain, and secure.
 * 
 * You can also use
  session_set_cookie_params(lifetime, path, domain [, secure [, httponly]])
 * to set the session cookie parameters manually.
 * 
 * 
 * 
 * 
  Storing the Session ID
 * 
 * By default PHP sessions use cookies to store the session ID on the client side. The other built-in method PHP can use is adding the session ID to the URL. You can set this to happen automatically if you set the session.use_trans_sid directive in the php.ini file to On; it is off by default.
 * Alternatively, you can manually embed the session ID in links so that it is passed along with every link. The session ID is stored in the PHP constant SID. To pass this value along manually, you add it to the end of a link similar to a GET parameter.
 * 
 * 
 * 
  The basic steps of using sessions in PHP are
 * 
  1. Starting a session
  2. Registering session variables
  3. Using session variables
  4. Deregistering variables and destroying the session
 * 
 * Note that these steps don’t necessarily all happen in the same script, and some of them happen in multiple scripts.
 * 
 * 
 * 
 */

// Before you can use session functionality, you need to actually begin a session.

// one way to do this is to begin a script with a call to the session_start() function
session_start(); // This function checks to see whether there is already a current session. If not, it will create one, providing access to the superglobal $_SESSION array. If a session already exists, session_start() loads the registered session variables so that you can use them. Therefore, it is essential to call session_start() at the start of all your scripts that use sessions. If this function is not called, anything stored in the session will not be available to the script.


$_SESSION['session_var'] = "Hello world!"; //  session variables are stored in the superglobal $_SESSION array. To create a session variable, you simply set an element in this array
// The session variable you have just created will be tracked until the session ends or until you manually unset it. The session may also naturally expire based on the session.gc_maxlifetime setting in the php.ini file. This setting determines the amount of time (in seconds) that a session will last before it is ended by the garbage collector.


echo 'The content of $_SESSION[\'session_var\'] is '
    . $_SESSION['session_var'] . '<br/>'; // You can  access the session variable via the $_SESSION superglobal array
// echo 'g '.SID,' gg'  ;

// The final value of the variable on the page is the one that will be available on subsequent pages. At the end of the script, the session variable is serialized, or frozen, until it is reloaded via the next call to session_start().
?>

<a href="page2.php">Next Page</a>
<?php echo SID ?>